openapi: 3.0.3
info:
  title: Precios y Promociones API
  description: API para gestionar precios base y promociones de productos por tienda (usando IDs numéricos incrementales donde aplica), y consultar precios finales.
  version: 1.2.0
servers:
  - url: http://localhost:4000/api/v1
    description: Servidor de Desarrollo Local
tags:
  - name: Tiendas
    description: Gestión de tiendas (CRUD completo no definido aquí).
  - name: Productos
    description: Gestión de productos (CRUD completo no definido aquí).
  - name: Precios
    description: Operaciones relacionadas con los precios base históricos.
  - name: Promociones Definiciones
    description: Operaciones para definir tipos de promociones (porcentaje).
  - name: Promociones Aplicaciones
    description: Operaciones para aplicar promociones definidas a tiendas/productos específicos.
  - name: Consultas
    description: Endpoints para realizar consultas complejas.

paths:
  /tienda/createStore:
      post:
        tags:
          - Tiendas
        summary: Crea una nueva tienda.
        description: Registra una nueva tienda en el sistema. La BD genera un ID numérico único.
        operationId: createStore
        requestBody:
          description: Nombre de la nueva tienda.
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreInput'
              examples:
                valid:
                  summary: Crear Market D
                  value:
                    nombreTienda: "Market D"
                emptyName:
                  summary: Nombre vacío (inválido)
                  value:
                    nombreTienda: "   "
                missingField:
                  summary: Falta el campo nombreTienda
                  value:
                    otroCampo: "valor"
        responses:
          '201':
            description: Tienda creada exitosamente.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Tienda creada exitosamente.
                    tiendaId:
                      type: integer
                      description: El ID numérico autoincremental de la tienda creada.
                      example: 4
                    nombreTienda:
                      type: string
                      example: "Market D"
                example:
                  message: Tienda creada exitosamente.
                  tiendaId: 4
                  nombreTienda: "Market D"
          '400':
            $ref: '#/components/responses/BadRequest'
          '500':
            $ref: '#/components/responses/InternalServerError'

  /productos/createProduct:
    post:
      tags:
        - Productos
      summary: Crea un nuevo producto.
      description: Registra un nuevo producto en el sistema. La BD genera un ID numérico único.
      operationId: createProduct
      requestBody:
        description: Nombre del nuevo producto.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
            examples:
              valid:
                summary: Crear Pan Integral
                value:
                  nombreProducto: "Pan Integral 500g"
              emptyName:
                summary: Nombre vacío (inválido)
                value:
                  nombreProducto: ""
              missingField:
                summary: Falta el campo nombreProducto
                value: {}
      responses:
        '201':
          description: Producto creado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Producto creado exitosamente.
                  productoId:
                    type: integer
                    description: El ID numérico autoincremental del producto creado.
                    example: 102
                  nombreProducto:
                    type: string
                    example: "Pan Integral 500g"
              example:
                message: Producto creado exitosamente.
                productoId: 102
                nombreProducto: "Pan Integral 500g"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /precios/createPrice:
    post:
      tags:
        - Precios
      summary: Crea un nuevo registro de precio histórico.
      description: Añade una nueva entrada de precio para un producto en una tienda específica (usando sus IDs numéricos), válido durante un intervalo de tiempo. Verifica la existencia de la tienda y el producto, y no permite solapamiento con precios existentes para la misma combinación. La BD genera un ID único para este registro de precio.
      operationId: createPrice
      requestBody:
        description: Datos del nuevo precio a crear.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrecioInput'
            examples:
              valid:
                summary: Ejemplo de precio válido
                value:
                  tiendaId: 1
                  productoId: 101
                  valor: 0.95
                  tiempoVigenciaInicio: "2025-07-01T00:00:00Z"
                  tiempoVigenciaFin: "2025-12-31T23:59:59Z"
              invalidDateRange:
                summary: Fechas inválidas (fin antes de inicio o formato incorrecto)
                value:
                  tiendaId: 1
                  productoId: 101
                  valor: 0.95
                  tiempoVigenciaInicio: "2025-08-01T00:00:00Z"
                  tiempoVigenciaFin: "2025-07-31T23:59:59Z"
              invalidValue:
                summary: Valor de precio negativo o no numérico
                value:
                  tiendaId: 1
                  productoId: 101
                  valor: -1.50
                  tiempoVigenciaInicio: "2025-07-01T00:00:00Z"
                  tiempoVigenciaFin: "2025-12-31T23:59:59Z"
              missingField:
                summary: Falta un campo requerido (valor)
                value:
                  tiendaId: 1
                  productoId: 101
                  # valor: 0.95 # Campo faltante
                  tiempoVigenciaInicio: "2025-07-01T00:00:00Z"
                  tiempoVigenciaFin: "2025-12-31T23:59:59Z"
              nonExistentStore:
                 summary: ID de tienda que no existe
                 value:
                   tiendaId: 999 # ID Numérico inválido
                   productoId: 101
                   valor: 0.95
                   tiempoVigenciaInicio: "2025-07-01T00:00:00Z"
                   tiempoVigenciaFin: "2025-12-31T23:59:59Z"
              nonExistentProduct:
                 summary: ID de producto que no existe
                 value:
                   tiendaId: 1
                   productoId: 888 # ID Numérico inválido
                   valor: 0.95
                   tiempoVigenciaInicio: "2025-07-01T00:00:00Z"
                   tiempoVigenciaFin: "2025-12-31T23:59:59Z"
      responses:
        '201':
          description: Precio creado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Precio creado exitosamente
                  precioRegistroId:
                    type: integer
                    description: El ID numérico autoincremental del registro de precio creado.
                    example: 106
              example:
                message: Precio creado exitosamente
                precioRegistroId: 106
        '400': # Errores de validación de entrada
           description: Solicitud inválida (campos faltantes, formato incorrecto de IDs/valor/fechas, o rango de fechas ilógico).
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Error'
               examples:
                 missing:
                   value: { message: "Valores faltantes requeridos: valor, ..." }
                 invalidDate:
                   value: { message: "Rango de fecha inválido (formato ISO 8601 esperado y fin debe ser posterior a inicio)." }
                 invalidValue:
                   value: { message: "Valor de precio inválido (debe ser un número no negativo)." }
                 invalidId:
                   value: { message: "ID de tienda inválido (debe ser un número)." }
        '404': # Error de FK no encontrada
           description: No se encontró la Tienda o el Producto especificado.
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Error'
               examples:
                 storeNotFound:
                   value: { message: "La tienda con ID '999' no existe." }
                 productNotFound:
                   value: { message: "El producto con ID '888' no existe." }
        '409': # Error de solapamiento
          description: Conflicto - El período de precio se solapa con uno existente para la misma tienda y producto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: El rango de fechas se solapa con un precio existente para el mismo producto y tienda.
        '500':
          $ref: '#/components/responses/InternalServerError'

  /promotions/definitions:
    post:
      tags:
        - Promociones Definiciones
      summary: Crea una nueva definición de promoción.
      description: Define un nuevo tipo de promoción basado en porcentaje de descuento. La BD genera un ID numérico único para esta definición.
      operationId: createPromotionDefinition
      requestBody:
        description: Datos de la nueva definición de promoción (solo el porcentaje).
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromocionDefinicionInput'
            examples:
              valid:
                summary: Definición válida
                value:
                  porcentajeDescuento: 15.50
              invalidPercentage:
                summary: Porcentaje fuera de rango
                value:
                  porcentajeDescuento: -10.00
              missingField:
                summary: Falta el porcentaje
                value: {}
      responses:
        '201':
          description: Definición de promoción creada exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Promotion definition created successfully.
                  promocionId: # El ID numérico de la DEFINICIÓN
                    type: integer
                    description: El ID numérico autoincremental de la definición creada.
                    example: 1
              example:
                message: Promotion definition created successfully.
                promocionId: 1
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /promotions/applications:
    post:
      tags:
        - Promociones Aplicaciones
      summary: Aplica una promoción existente a una combinación tienda/producto/período.
      description: Crea un registro que indica que una promoción definida (identificada por su ID numérico) aplica a un producto (ID numérico) en una tienda (ID numérico) durante un período específico. Permite solapamientos. La BD genera un ID único para esta aplicación.
      operationId: createPromotionApplication
      requestBody:
        description: Datos de la aplicación de promoción.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromocionAplicacionInput' # Schema de entrada de Aplicación
            examples:
              valid:
                summary: Aplicación válida
                value:
                  tiendaId: 2       # ID Numérico
                  productoId: 101    # ID Numérico
                  promocionId: 1
                  tiempoPVigenciaInicio: "2025-08-15T00:00:00Z"
                  tiempoPVigenciaFin: "2025-08-31T23:59:59Z"
              invalidDateRange:
                summary: Fechas inválidas
                value:
                  tiendaId: 2
                  productoId: 101
                  promocionId: 1
                  tiempoPVigenciaInicio: "2025-09-01T00:00:00Z"
                  tiempoPVigenciaFin: "2025-08-31T23:59:59Z"
              missingField:
                summary: Falta el ID de promoción
                value:
                  tiendaId: 2
                  productoId: 101
                  # promocionId: 1 # Campo faltante
                  tiempoPVigenciaInicio: "2025-08-15T00:00:00Z"
                  tiempoPVigenciaFin: "2025-08-31T23:59:59Z"
              nonExistentFK:
                summary: ID de promoción que no existe
                value:
                  tiendaId: 2
                  productoId: 101
                  promocionId: 9999 # ID de promoción inválido
                  tiempoPVigenciaInicio: "2025-08-15T00:00:00Z"
                  tiempoPVigenciaFin: "2025-08-31T23:59:59Z"
      responses:
        '201':
          description: Aplicación de promoción creada exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Promotion application created successfully.
                  aplicacionId: # El ID de la APLICACIÓN
                    type: integer
                    description: El ID numérico autoincremental del registro de aplicación creado.
                    example: 2015
              example:
                message: Promotion application created successfully.
                aplicacionId: 2015
        '400': # Incluye FKs no existentes
           description: Solicitud inválida (campos faltantes, formato, fechas, o FK inexistente para Tienda/Producto/PromociónDefinición).
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Error'
               examples:
                 missingField:
                   value: { message: "Missing required fields: promocionId, ..." }
                 fkViolation:
                   value: { message: "Invalid reference ID (Promotion definition with ID '9999' does not exist)." }
        '500':
          $ref: '#/components/responses/InternalServerError'

  /market/queries/final-price:
    get:
      tags:
        - Consultas
      summary: Consulta el precio final de un producto en una tienda en un momento dado.
      description: Calcula el precio final considerando el precio base activo y aplicando la promoción con el mayor porcentaje de descuento que esté activa en la fecha y hora especificadas (usando IDs numéricos para tienda y producto).
      operationId: getFinalPrice
      parameters:
        - name: tiendaId
          in: query
          required: true
          description: El ID numérico de la tienda.
          schema:
            type: integer # ID numérico
          example: 1
        - name: productoId
          in: query
          required: true
          description: El ID numérico del producto.
          schema:
            type: integer # ID numérico
          example: 101
        - name: datetime
          in: query
          required: true
          description: La fecha y hora (en formato ISO 8601 UTC - YYYY-MM-DDTHH:mm:ssZ) para la cual se desea consultar el precio.
          schema:
            type: string
            format: date-time
          example: "2025-07-01T00:00:00Z"
      responses:
        '200':
          description: Precio final calculado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalPriceResponse' # Schema de respuesta
              examples:
                withPromotion:
                  summary: Caso con promoción aplicada
                  value:
                    finalPrice: 0.38
                    basePrice: 0.50
                    appliedPromotionId: 1 # ID numérico de la promoción
                    discountPercentage: 25.00
                    queryDateTime: "2025-07-01T00:00:00Z"
                noPromotion:
                  summary: Caso sin promoción activa
                  value:
                    finalPrice: 0.92
                    basePrice: 0.92
                    appliedPromotionId: null
                    discountPercentage: null
                    queryDateTime: "2025-05-05T08:00:00Z"
                multiplePromotionsBestSelected:
                   summary: Caso con múltiples promociones, se aplica la mejor
                   value:
                     finalPrice: 0.33
                     basePrice: 0.50
                     appliedPromotionId: 2 # ID numérico de la promoción con 35%
                     discountPercentage: 35.00
                     queryDateTime: "2025-05-04T09:00:00Z"
        '400':
          description: Parámetros de consulta inválidos (faltantes o formato incorrecto).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missingParam:
                  value: { message: "Missing required query parameters: datetime." }
                invalidFormat:
                  value: { message: "Invalid datetime format (should be ISO 8601)." }
                invalidId:
                  value: { message: "Invalid tiendaId (must be a number)." }
        '404':
          description: No se encontró un precio base activo para la tienda, producto y hora especificados.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: No active base price found for the given product, store, and time.
        '500':
          $ref: '#/components/responses/InternalServerError'
  
  /market/allStores:
    get:
      tags:
        - Consultas
      summary: Obtiene una lista paginada de tiendas.
      description: Retorna una lista de tiendas registradas, permitiendo paginación a través de los parámetros 'page' y 'limit'. Por defecto, muestra 5 tiendas por página.
      operationId: getAllStores
      parameters:
        - name: page
          in: query
          required: false
          description: Número de la página a obtener. Comienza en 1.
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: limit
          in: query
          required: false
          description: Número máximo de tiendas a retornar por página.
          schema:
            type: integer
            minimum: 1
            maximum: 100 # Puedes definir un máximo razonable
            default: 5
          example: 5
      responses:
        '200':
          description: Lista de tiendas obtenida exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tiendas obtenidas exitosamente.
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Store' # Referencia al schema de Tienda completo
                  pagination:
                    $ref: '#/components/schemas/Pagination' # Referencia al schema de Paginación
              examples:
                defaultPage: # Ejemplo para la primera página con 5 items
                  summary: Primera página con 5 tiendas
                  value:
                    message: Tiendas obtenidas exitosamente.
                    data:
                      - TiendaID: 1
                        NombreTienda: "Market A"
                      - TiendaID: 2
                        NombreTienda: "Super B"
                      - TiendaID: 3
                        NombreTienda: "Kwik C"
                      - TiendaID: 4
                        NombreTienda: "Tienda D"
                      - TiendaID: 5
                        NombreTienda: "Market Express"
                    pagination:
                      currentPage: 1
                      itemsPerPage: 5
                      totalItems: 23 # Asumiendo 23 tiendas en total
                      totalPages: 5  # 23 / 5 = 4.6 -> 5 páginas
                      hasNextPage: true
                      hasPreviousPage: false
                specificPage: # Ejemplo para la página 2 con límite de 3
                  summary: Página 2 con límite de 3 tiendas
                  value:
                    message: Tiendas obtenidas exitosamente.
                    data:
                      - TiendaID: 4
                        NombreTienda: "Tienda D"
                      - TiendaID: 5
                        NombreTienda: "Market Express"
                      - TiendaID: 6
                        NombreTienda: "MiniMarket Z"
                    pagination:
                      currentPage: 2
                      itemsPerPage: 3
                      totalItems: 23
                      totalPages: 8 # 23 / 3 = 7.6 -> 8 páginas
                      hasNextPage: true
                      hasPreviousPage: true
                emptyResult: # Ejemplo si no hay tiendas o se pide una página fuera de rango
                  summary: Sin resultados (ej. página más allá del total)
                  value:
                    message: Tiendas obtenidas exitosamente.
                    data: []
                    pagination:
                      currentPage: 10
                      itemsPerPage: 5
                      totalItems: 23
                      totalPages: 5
                      hasNextPage: false
                      hasPreviousPage: true # Si totalPages es 5 y pides la 10, la 9 existió
        '400':
          description: Parámetros de consulta 'page' o 'limit' inválidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Los parámetros \"page\" y \"limit\" deben ser números positivos."
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    StoreInput:
      type: object
      required:
        - nombreTienda
      properties:
        nombreTienda:
          type: string
          description: Nombre de la tienda. No puede estar vacío.
          example: "Supermercado Sur"

    ProductInput:
      type: object
      required:
        - nombreProducto
      properties:
        nombreProducto:
          type: string
          description: Nombre del producto. No puede estar vacío.
          example: "Yogur Natural 1L"

    PrecioInput: # Schema para crear un precio
      type: object
      required: [tiendaId, productoId, valor, tiempoVigenciaInicio, tiempoVigenciaFin]
      properties:
        tiendaId:
          type: integer
          description: ID numérico de la tienda.
          example: 1
        productoId:
          type: integer
          description: ID numérico del producto.
          example: 101
        valor:
          type: number
          format: float
          description: El valor monetario del precio base.
          example: 0.95
        tiempoVigenciaInicio:
          type: string
          format: date-time
          description: Fecha y hora de inicio de vigencia (ISO 8601 UTC).
          example: "2025-07-01T00:00:00Z"
        tiempoVigenciaFin:
          type: string
          format: date-time
          description: Fecha y hora de fin de vigencia (ISO 8601 UTC). Debe ser posterior al inicio.
          example: "2025-12-31T23:59:59Z"
      

    PromocionDefinicionInput: # Schema para crear una definición
      type: object
      required: [porcentajeDescuento]
      properties:
        porcentajeDescuento:
          type: number
          format: float
          description: El porcentaje de descuento (e.g., 25.5 para 25.5%). Debe estar entre 0 y 100.
          example: 15.50

    PromocionAplicacionInput: # Schema para crear una aplicación
      type: object
      required: [tiendaId, productoId, promocionId, tiempoPVigenciaInicio, tiempoPVigenciaFin]
      properties:
        tiendaId:
          type: integer
          description: ID numérico de la tienda.
          example: 2
        productoId:
          type: integer
          description: ID numérico del producto.
          example: 101
        promocionId:
          type: integer
          description: ID numérico de la Promocion_Definicion a aplicar.
          example: 1
        tiempoPVigenciaInicio:
          type: string
          format: date-time
          description: Fecha y hora de inicio de la aplicación (ISO 8601 UTC).
          example: "2025-08-15T00:00:00Z"
        tiempoPVigenciaFin:
          type: string
          format: date-time
          description: Fecha y hora de fin de la aplicación (ISO 8601 UTC).
          example: "2025-08-31T23:59:59Z"

    Store:
      type: object
      properties:
        TiendaID:
          type: integer
          description: ID numérico único de la tienda.
          example: 1
          readOnly: true
        NombreTienda:
          type: string
          description: Nombre de la tienda.
          example: "Market A"
      required:
        - TiendaID
        - NombreTienda
    Pagination: # Schema para la metadata de paginación
      type: object
      properties:
        currentPage:
          type: integer
          description: La página actual de resultados.
          example: 1
        itemsPerPage:
          type: integer
          description: El número de items solicitados por página.
          example: 5
        totalItems:
          type: integer
          description: El número total de items disponibles.
          example: 23
        totalPages:
          type: integer
          description: El número total de páginas disponibles.
          example: 5
        hasNextPage:
          type: boolean
          description: Indica si hay una página siguiente.
        hasPreviousPage:
          type: boolean
          description: Indica si hay una página anterior.
      required:
        - currentPage
        - itemsPerPage
        - totalItems
        - totalPages
        - hasNextPage
        - hasPreviousPage

    # --- Schemas de Respuesta ---
    FinalPriceResponse: # Schema para la respuesta de la consulta
      type: object
      properties:
        finalPrice:
          type: number
          format: float
          description: El precio final calculado después de aplicar el mejor descuento.
        basePrice:
          type: number
          format: float
          description: El precio base encontrado para la fecha/hora.
        appliedPromotionId:
          type: integer
          nullable: true
          description: El ID numérico de la promoción que se aplicó (o null).
        discountPercentage:
          type: number
          format: float
          nullable: true
          description: El porcentaje de descuento aplicado (o null).
        queryDateTime:
          type: string
          format: date-time
          description: La fecha/hora para la que se realizó la consulta.

    Error: # Schema genérico de error
      type: object
      properties:
        message:
          type: string
          description: Descripción del error ocurrido.
      required:
        - message

  responses: # Definiciones genéricas de respuestas
    NotFound:
      description: El recurso solicitado no fue encontrado.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Resource not found."
    BadRequest:
      description: La solicitud es inválida (faltan campos, formato incorrecto, valores inválidos).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Invalid input data: 'valor' must be a positive number."
    InternalServerError:
      description: Error interno del servidor.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Internal Server Error"